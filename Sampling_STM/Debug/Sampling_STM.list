
Sampling_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080049ac  080049ac  000059ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f4  080049f4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049f4  080049f4  000059f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049fc  080049fc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049fc  080049fc  000059fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a00  08004a00  00005a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08004a10  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004a10  0000616c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fcb  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002298  00000000  00000000  00018007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001a2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d16  00000000  00000000  0001b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002231f  00000000  00000000  0001c076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012476  00000000  00000000  0003e395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9ab4  00000000  00000000  0005080b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a2bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004790  00000000  00000000  0012a304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0012ea94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004994 	.word	0x08004994

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004994 	.word	0x08004994

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb73 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f810 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f93a 	bl	800077c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000508:	f000 f86e 	bl	80005e8 <MX_ADC1_Init>
  MX_TIM7_Init();
 800050c:	f000 f8d0 	bl	80006b0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f904 	bl	800071c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7); // Start Timer 7 (TIM7)
 8000514:	4802      	ldr	r0, [pc, #8]	@ (8000520 <main+0x28>)
 8000516:	f003 fa79 	bl	8003a0c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	bf00      	nop
 800051c:	e7fd      	b.n	800051a <main+0x22>
 800051e:	bf00      	nop
 8000520:	2000008c 	.word	0x2000008c

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	@ 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	@ 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fa01 	bl	800493a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800054a:	f002 f881 	bl	8002650 <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 f9c6 	bl	80008e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000558:	f002 f85c 	bl	8002614 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <SystemClock_Config+0xc0>)
 800055e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000562:	4a20      	ldr	r2, [pc, #128]	@ (80005e4 <SystemClock_Config+0xc0>)
 8000564:	f023 0318 	bic.w	r3, r3, #24
 8000568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800056c:	2314      	movs	r3, #20
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800057c:	2360      	movs	r3, #96	@ 0x60
 800057e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000584:	2301      	movs	r3, #1
 8000586:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000588:	2301      	movs	r3, #1
 800058a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800058c:	2310      	movs	r3, #16
 800058e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000590:	2307      	movs	r3, #7
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 f8ab 	bl	80026fc <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005ac:	f000 f99a 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2101      	movs	r1, #1
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fcab 	bl	8002f24 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005d4:	f000 f986 	bl	80008e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005d8:	f003 f8be 	bl	8003758 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005dc:	bf00      	nop
 80005de:	3758      	adds	r7, #88	@ 0x58
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000

080005e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005fe:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000600:	4a29      	ldr	r2, [pc, #164]	@ (80006a8 <MX_ADC1_Init+0xc0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000604:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000610:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000616:	4b23      	ldr	r3, [pc, #140]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 800061e:	2204      	movs	r2, #4
 8000620:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000622:	4b20      	ldr	r3, [pc, #128]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000624:	2200      	movs	r2, #0
 8000626:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000628:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 800062a:	2200      	movs	r2, #0
 800062c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800062e:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000630:	2201      	movs	r2, #1
 8000632:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000636:	2200      	movs	r2, #0
 8000638:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 800063e:	2200      	movs	r2, #0
 8000640:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000648:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000652:	2200      	movs	r2, #0
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065e:	4811      	ldr	r0, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 8000660:	f000 fd4c 	bl	80010fc <HAL_ADC_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800066a:	f000 f93b 	bl	80008e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_ADC1_Init+0xc4>)
 8000670:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000672:	2306      	movs	r3, #6
 8000674:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800067a:	237f      	movs	r3, #127	@ 0x7f
 800067c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067e:	2304      	movs	r3, #4
 8000680:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <MX_ADC1_Init+0xbc>)
 800068c:	f000 ffaa 	bl	80015e4 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000696:	f000 f925 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	50040000 	.word	0x50040000
 80006ac:	21800100 	.word	0x21800100

080006b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_TIM7_Init+0x64>)
 80006c2:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <MX_TIM7_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 50-1;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_TIM7_Init+0x64>)
 80006c8:	2231      	movs	r2, #49	@ 0x31
 80006ca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_TIM7_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_TIM7_Init+0x64>)
 80006d4:	2263      	movs	r2, #99	@ 0x63
 80006d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_TIM7_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006de:	480d      	ldr	r0, [pc, #52]	@ (8000714 <MX_TIM7_Init+0x64>)
 80006e0:	f003 f93c 	bl	800395c <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80006ea:	f000 f8fb 	bl	80008e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <MX_TIM7_Init+0x64>)
 80006fc:	f003 fb7a 	bl	8003df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000706:	f000 f8ed 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000008c 	.word	0x2000008c
 8000718:	40001400 	.word	0x40001400

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000722:	4a15      	ldr	r2, [pc, #84]	@ (8000778 <MX_USART1_UART_Init+0x5c>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000728:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART1_UART_Init+0x58>)
 8000760:	f003 fbcc 	bl	8003efc <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800076a:	f000 f8bb 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000d8 	.word	0x200000d8
 8000778:	40013800 	.word	0x40013800

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a2e      	ldr	r2, [pc, #184]	@ (8000850 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a28      	ldr	r2, [pc, #160]	@ (8000850 <MX_GPIO_Init+0xd4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b26      	ldr	r3, [pc, #152]	@ (8000850 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	4a22      	ldr	r2, [pc, #136]	@ (8000850 <MX_GPIO_Init+0xd4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	481d      	ldr	r0, [pc, #116]	@ (8000854 <MX_GPIO_Init+0xd8>)
 80007e0:	f001 ff00 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80007e4:	2304      	movs	r3, #4
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f4:	2307      	movs	r3, #7
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000802:	f001 fd85 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000818:	2303      	movs	r3, #3
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f001 fd73 	bl	8002310 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800082a:	2308      	movs	r3, #8
 800082c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0xd8>)
 8000842:	f001 fd65 	bl	8002310 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	48000400 	.word	0x48000400

08000858 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef* htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) // If the Callback was executed for ADC timer TIM7
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a1a      	ldr	r2, [pc, #104]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d12c      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		HAL_ADC_Start(&hadc1); // Start ADC
 8000868:	4819      	ldr	r0, [pc, #100]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800086a:	f000 fd89 	bl	8001380 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,10); // Wait for conversion
 800086e:	210a      	movs	r1, #10
 8000870:	4817      	ldr	r0, [pc, #92]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000872:	f000 fe1b 	bl	80014ac <HAL_ADC_PollForConversion>
		raw_ADC_value = HAL_ADC_GetValue(&hadc1); // Get the unsigned 12 - bits ADC data
 8000876:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000878:	f000 fea7 	bl	80015ca <HAL_ADC_GetValue>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000882:	801a      	strh	r2, [r3, #0]
//		 HAL_UART_Transmit(&huart1, (uint8_t*)string_1, strlen(string_1),10);

/* Break ADC output into 2 bytes through bitwise manipulation */

		// Extract Least Significant 8 bits of ADC data
		temp = raw_ADC_value & 0xFF;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800088e:	801a      	strh	r2, [r3, #0]
		raw_ADC_value_1[0] = temp;
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000898:	701a      	strb	r2, [r3, #0]

		//Extract most significant 8 bits of ADC data
		temp = raw_ADC_value >> 8;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80008a4:	801a      	strh	r2, [r3, #0]
		raw_ADC_value_1[1] = temp;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008ae:	705a      	strb	r2, [r3, #1]

		// Print raw_ADC_value_1 into string_1
		// sprintf(string_1,"raw ADC value: %d\n",raw_ADC_value_1);
		// Transmit string_1 over UART2
//		HAL_UART_Transmit(&huart2, (uint8_t*)string_1, strlen(string_1),10);
		HAL_UART_Transmit(&huart1, (uint8_t*)raw_ADC_value_1, 2,10);
 80008b0:	230a      	movs	r3, #10
 80008b2:	2202      	movs	r2, #2
 80008b4:	4909      	ldr	r1, [pc, #36]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80008b6:	480a      	ldr	r0, [pc, #40]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80008b8:	f003 fb6e 	bl	8003f98 <HAL_UART_Transmit>

		// Transmit 16 bit ADC data through UART1
//		HAL_UART_Transmit(&huart1, (uint8_t*)raw_ADC_value_1,2,10);
		HAL_ADC_Stop(&hadc1); // Stop ADC
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80008be:	f000 fdc2 	bl	8001446 <HAL_ADC_Stop>
	}
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	20000028 	.word	0x20000028
 80008d4:	20000160 	.word	0x20000160
 80008d8:	20000166 	.word	0x20000166
 80008dc:	20000164 	.word	0x20000164
 80008e0:	200000d8 	.word	0x200000d8

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	@ 0x60
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6593      	str	r3, [r2, #88]	@ 0x58
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	@ 0x78
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2254      	movs	r2, #84	@ 0x54
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f003 ffee 	bl	800493a <memset>
  if(hadc->Instance==ADC1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a25      	ldr	r2, [pc, #148]	@ (80009f8 <HAL_ADC_MspInit+0xc0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d143      	bne.n	80009f0 <HAL_ADC_MspInit+0xb8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000968:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800096c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800096e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000972:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800097c:	2310      	movs	r3, #16
 800097e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000980:	2307      	movs	r3, #7
 8000982:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000984:	2302      	movs	r3, #2
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000988:	2302      	movs	r3, #2
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800098c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000992:	f107 0310 	add.w	r3, r7, #16
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fce8 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80009a2:	f7ff ff9f 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_ADC_MspInit+0xc4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a14      	ldr	r2, [pc, #80]	@ (80009fc <HAL_ADC_MspInit+0xc4>)
 80009ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_ADC_MspInit+0xc4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_ADC_MspInit+0xc4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a0e      	ldr	r2, [pc, #56]	@ (80009fc <HAL_ADC_MspInit+0xc4>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <HAL_ADC_MspInit+0xc4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d6:	2308      	movs	r3, #8
 80009d8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009da:	230b      	movs	r3, #11
 80009dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f001 fc90 	bl	8002310 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009f0:	bf00      	nop
 80009f2:	3778      	adds	r7, #120	@ 0x78
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	50040000 	.word	0x50040000
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d113      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_TIM_Base_MspInit+0x48>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <HAL_TIM_Base_MspInit+0x48>)
 8000a18:	f043 0320 	orr.w	r3, r3, #32
 8000a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_TIM_Base_MspInit+0x48>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	f003 0320 	and.w	r3, r3, #32
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2037      	movs	r0, #55	@ 0x37
 8000a30:	f001 fc37 	bl	80022a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a34:	2037      	movs	r0, #55	@ 0x37
 8000a36:	f001 fc50 	bl	80022da <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40001400 	.word	0x40001400
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09e      	sub	sp, #120	@ 0x78
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2254      	movs	r2, #84	@ 0x54
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 ff64 	bl	800493a <memset>
  if(huart->Instance==USART1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <HAL_UART_MspInit+0xa8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d137      	bne.n	8000aec <HAL_UART_MspInit+0xa0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fc6f 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a94:	f7ff ff26 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <HAL_UART_MspInit+0xac>)
 8000a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9c:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <HAL_UART_MspInit+0xac>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_UART_MspInit+0xac>)
 8000aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_UART_MspInit+0xac>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab4:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <HAL_UART_MspInit+0xac>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_UART_MspInit+0xac>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ac8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000acc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ada:	2307      	movs	r3, #7
 8000adc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae8:	f001 fc12 	bl	8002310 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000aec:	bf00      	nop
 8000aee:	3778      	adds	r7, #120	@ 0x78
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f89d 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <TIM7_IRQHandler+0x10>)
 8000b62:	f002 ffa7 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000008c 	.word	0x2000008c

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f003 fec3 	bl	800494c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fc97 	bl	80004f8 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd8:	08004a04 	.word	0x08004a04
  ldr r2, =_sbss
 8000bdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be0:	2000016c 	.word	0x2000016c

08000be4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f001 fb4b 	bl	800228c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff fe72 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fb57 	bl	80022f6 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f001 fb21 	bl	80022a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000168 	.word	0x20000168

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000168 	.word	0x20000168

08000cd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3360      	adds	r3, #96	@ 0x60
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	4413      	add	r3, r2
 8000d52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <LL_ADC_SetOffset+0x44>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	430a      	orrs	r2, r1
 8000d66:	4313      	orrs	r3, r2
 8000d68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	03fff000 	.word	0x03fff000

08000d80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3360      	adds	r3, #96	@ 0x60
 8000d8e:	461a      	mov	r2, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3360      	adds	r3, #96	@ 0x60
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dd6:	bf00      	nop
 8000dd8:	371c      	adds	r7, #28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3330      	adds	r3, #48	@ 0x30
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	4413      	add	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	211f      	movs	r1, #31
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	0e9b      	lsrs	r3, r3, #26
 8000e40:	f003 011f 	and.w	r1, r3, #31
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	3314      	adds	r3, #20
 8000e70:	461a      	mov	r2, r3
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	0e5b      	lsrs	r3, r3, #25
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	4413      	add	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	0d1b      	lsrs	r3, r3, #20
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	401a      	ands	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	0d1b      	lsrs	r3, r3, #20
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000eaa:	bf00      	nop
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0318 	and.w	r3, r3, #24
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000edc:	40d9      	lsrs	r1, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	0007ffff 	.word	0x0007ffff

08000f00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6093      	str	r3, [r2, #8]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f38:	d101      	bne.n	8000f3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f88:	d101      	bne.n	8000f8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fb0:	f043 0201 	orr.w	r2, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fd8:	f043 0202 	orr.w	r2, r3, #2
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <LL_ADC_IsEnabled+0x18>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <LL_ADC_IsEnabled+0x1a>
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b02      	cmp	r3, #2
 8001024:	d101      	bne.n	800102a <LL_ADC_IsDisableOngoing+0x18>
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <LL_ADC_IsDisableOngoing+0x1a>
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800104c:	f043 0204 	orr.w	r2, r3, #4
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001074:	f043 0210 	orr.w	r2, r3, #16
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b04      	cmp	r3, #4
 800109a:	d101      	bne.n	80010a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010c2:	f043 0220 	orr.w	r2, r3, #32
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d101      	bne.n	80010ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e126      	b.n	8001364 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001120:	2b00      	cmp	r3, #0
 8001122:	d109      	bne.n	8001138 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff fc07 	bl	8000938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fef1 	bl	8000f24 <LL_ADC_IsDeepPowerDownEnabled>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fed7 	bl	8000f00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff0c 	bl	8000f74 <LL_ADC_IsInternalRegulatorEnabled>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d115      	bne.n	800118e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fef0 	bl	8000f4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800116c:	4b7f      	ldr	r3, [pc, #508]	@ (800136c <HAL_ADC_Init+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	099b      	lsrs	r3, r3, #6
 8001172:	4a7f      	ldr	r2, [pc, #508]	@ (8001370 <HAL_ADC_Init+0x274>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	099b      	lsrs	r3, r3, #6
 800117a:	3301      	adds	r3, #1
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001180:	e002      	b.n	8001188 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3b01      	subs	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f9      	bne.n	8001182 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff feee 	bl	8000f74 <LL_ADC_IsInternalRegulatorEnabled>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10d      	bne.n	80011ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a2:	f043 0210 	orr.w	r2, r3, #16
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff62 	bl	8001088 <LL_ADC_REG_IsConversionOngoing>
 80011c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80bf 	bne.w	8001352 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 80bb 	bne.w	8001352 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011e4:	f043 0202 	orr.w	r2, r3, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fefb 	bl	8000fec <LL_ADC_IsEnabled>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10b      	bne.n	8001214 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011fc:	485d      	ldr	r0, [pc, #372]	@ (8001374 <HAL_ADC_Init+0x278>)
 80011fe:	f7ff fef5 	bl	8000fec <LL_ADC_IsEnabled>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	4619      	mov	r1, r3
 800120e:	485a      	ldr	r0, [pc, #360]	@ (8001378 <HAL_ADC_Init+0x27c>)
 8001210:	f7ff fd5e 	bl	8000cd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e5b      	ldrb	r3, [r3, #25]
 8001218:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800121e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001224:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800122a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001232:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d106      	bne.n	8001250 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	045b      	lsls	r3, r3, #17
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001254:	2b00      	cmp	r3, #0
 8001256:	d009      	beq.n	800126c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001264:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	4b42      	ldr	r3, [pc, #264]	@ (800137c <HAL_ADC_Init+0x280>)
 8001274:	4013      	ands	r3, r2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	430b      	orrs	r3, r1
 800127e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff26 	bl	80010d6 <LL_ADC_INJ_IsConversionOngoing>
 800128a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d13d      	bne.n	800130e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d13a      	bne.n	800130e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800129c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012b4:	f023 0302 	bic.w	r3, r3, #2
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	430b      	orrs	r3, r1
 80012c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d118      	bne.n	80012fe <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80012d6:	f023 0304 	bic.w	r3, r3, #4
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012e2:	4311      	orrs	r1, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80012e8:	4311      	orrs	r1, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012ee:	430a      	orrs	r2, r1
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	611a      	str	r2, [r3, #16]
 80012fc:	e007      	b.n	800130e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0201 	bic.w	r2, r2, #1
 800130c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d10c      	bne.n	8001330 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	f023 010f 	bic.w	r1, r3, #15
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	631a      	str	r2, [r3, #48]	@ 0x30
 800132e:	e007      	b.n	8001340 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 020f 	bic.w	r2, r2, #15
 800133e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001344:	f023 0303 	bic.w	r3, r3, #3
 8001348:	f043 0201 	orr.w	r2, r3, #1
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001350:	e007      	b.n	8001362 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001362:	7ffb      	ldrb	r3, [r7, #31]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	053e2d63 	.word	0x053e2d63
 8001374:	50040000 	.word	0x50040000
 8001378:	50040300 	.word	0x50040300
 800137c:	fff0c007 	.word	0xfff0c007

08001380 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe7b 	bl	8001088 <LL_ADC_REG_IsConversionOngoing>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d14f      	bne.n	8001438 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Start+0x26>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e04b      	b.n	800143e <HAL_ADC_Start+0xbe>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fdb6 	bl	8001f20 <ADC_Enable>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d137      	bne.n	800142e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013de:	d106      	bne.n	80013ee <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	f023 0206 	bic.w	r2, r3, #6
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80013ec:	e002      	b.n	80013f4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	221c      	movs	r2, #28
 80013fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001416:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800141a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe06 	bl	8001038 <LL_ADC_REG_StartConversion>
 800142c:	e006      	b.n	800143c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001436:	e001      	b.n	800143c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001438:	2302      	movs	r3, #2
 800143a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_ADC_Stop+0x16>
 8001458:	2302      	movs	r3, #2
 800145a:	e023      	b.n	80014a4 <HAL_ADC_Stop+0x5e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001464:	2103      	movs	r1, #3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fc9e 	bl	8001da8 <ADC_ConversionStop>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d111      	bne.n	800149a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fdd8 	bl	800202c <ADC_Disable>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800148a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	f043 0201 	orr.w	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b08      	cmp	r3, #8
 80014bc:	d102      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80014be:	2308      	movs	r3, #8
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e010      	b.n	80014e6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d6:	f043 0220 	orr.w	r2, r3, #32
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e06f      	b.n	80015c2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80014e2:	2304      	movs	r3, #4
 80014e4:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014e6:	f7ff fbe7 	bl	8000cb8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014ec:	e021      	b.n	8001532 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d01d      	beq.n	8001532 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80014f6:	f7ff fbdf 	bl	8000cb8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <HAL_ADC_PollForConversion+0x60>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d112      	bne.n	8001532 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10b      	bne.n	8001532 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151e:	f043 0204 	orr.w	r2, r3, #4
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e047      	b.n	80015c2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0d6      	beq.n	80014ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001544:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fc46 	bl	8000de2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01c      	beq.n	8001596 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e5b      	ldrb	r3, [r3, #25]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d118      	bne.n	8001596 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b08      	cmp	r3, #8
 8001570:	d111      	bne.n	8001596 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001576:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d104      	bne.n	80015ae <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2208      	movs	r2, #8
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e008      	b.n	80015c0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	220c      	movs	r2, #12
 80015be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0b6      	sub	sp, #216	@ 0xd8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x22>
 8001602:	2302      	movs	r3, #2
 8001604:	e3bb      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x79a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd38 	bl	8001088 <LL_ADC_REG_IsConversionOngoing>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 83a0 	bne.w	8001d60 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d824      	bhi.n	800167a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	3b02      	subs	r3, #2
 8001636:	2b03      	cmp	r3, #3
 8001638:	d81b      	bhi.n	8001672 <HAL_ADC_ConfigChannel+0x8e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <HAL_ADC_ConfigChannel+0x5c>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001651 	.word	0x08001651
 8001644:	08001659 	.word	0x08001659
 8001648:	08001661 	.word	0x08001661
 800164c:	08001669 	.word	0x08001669
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001650:	230c      	movs	r3, #12
 8001652:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001656:	e010      	b.n	800167a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001658:	2312      	movs	r3, #18
 800165a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800165e:	e00c      	b.n	800167a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001660:	2318      	movs	r3, #24
 8001662:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001666:	e008      	b.n	800167a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800166c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001670:	e003      	b.n	800167a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001672:	2306      	movs	r3, #6
 8001674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001678:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6818      	ldr	r0, [r3, #0]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001688:	f7ff fbbe 	bl	8000e08 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fcf9 	bl	8001088 <LL_ADC_REG_IsConversionOngoing>
 8001696:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fd19 	bl	80010d6 <LL_ADC_INJ_IsConversionOngoing>
 80016a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 81a4 	bne.w	80019fa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 819f 	bne.w	80019fa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f7ff fbc9 	bl	8000e60 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d00a      	beq.n	8001706 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6919      	ldr	r1, [r3, #16]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001700:	f7ff fb1a 	bl	8000d38 <LL_ADC_SetOffset>
 8001704:	e179      	b.n	80019fa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb37 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001712:	4603      	mov	r3, r0
 8001714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10a      	bne.n	8001732 <HAL_ADC_ConfigChannel+0x14e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fb2c 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	0e9b      	lsrs	r3, r3, #26
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	e01e      	b.n	8001770 <HAL_ADC_ConfigChannel+0x18c>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fb21 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001750:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001758:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001760:	2320      	movs	r3, #32
 8001762:	e004      	b.n	800176e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x1a4>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0e9b      	lsrs	r3, r3, #26
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	e018      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1d6>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800179c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80017a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80017ac:	2320      	movs	r3, #32
 80017ae:	e004      	b.n	80017ba <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80017b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d106      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff faf0 	bl	8000dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fad4 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10a      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x214>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2101      	movs	r1, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fac9 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	0e9b      	lsrs	r3, r3, #26
 80017f2:	f003 021f 	and.w	r2, r3, #31
 80017f6:	e01e      	b.n	8001836 <HAL_ADC_ConfigChannel+0x252>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fabe 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001816:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800181a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800181e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001826:	2320      	movs	r3, #32
 8001828:	e004      	b.n	8001834 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800182a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800183e:	2b00      	cmp	r3, #0
 8001840:	d105      	bne.n	800184e <HAL_ADC_ConfigChannel+0x26a>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0e9b      	lsrs	r3, r3, #26
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	e018      	b.n	8001880 <HAL_ADC_ConfigChannel+0x29c>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001862:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001866:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800186a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001872:	2320      	movs	r3, #32
 8001874:	e004      	b.n	8001880 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001880:	429a      	cmp	r2, r3
 8001882:	d106      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2200      	movs	r2, #0
 800188a:	2101      	movs	r1, #1
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fa8d 	bl	8000dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2102      	movs	r1, #2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fa71 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10a      	bne.n	80018be <HAL_ADC_ConfigChannel+0x2da>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa66 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	0e9b      	lsrs	r3, r3, #26
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	e01e      	b.n	80018fc <HAL_ADC_ConfigChannel+0x318>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2102      	movs	r1, #2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fa5b 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018d4:	fa93 f3a3 	rbit	r3, r3
 80018d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80018dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80018e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80018e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80018ec:	2320      	movs	r3, #32
 80018ee:	e004      	b.n	80018fa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80018f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x330>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	e014      	b.n	800193e <HAL_ADC_ConfigChannel+0x35a>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001922:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001930:	2320      	movs	r3, #32
 8001932:	e004      	b.n	800193e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001934:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800193e:	429a      	cmp	r2, r3
 8001940:	d106      	bne.n	8001950 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	2102      	movs	r1, #2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fa2e 	bl	8000dac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2103      	movs	r1, #3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fa12 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10a      	bne.n	800197c <HAL_ADC_ConfigChannel+0x398>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2103      	movs	r1, #3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa07 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	0e9b      	lsrs	r3, r3, #26
 8001976:	f003 021f 	and.w	r2, r3, #31
 800197a:	e017      	b.n	80019ac <HAL_ADC_ConfigChannel+0x3c8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2103      	movs	r1, #3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f9fc 	bl	8000d80 <LL_ADC_GetOffsetChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001996:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800199e:	2320      	movs	r3, #32
 80019a0:	e003      	b.n	80019aa <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80019a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x3e0>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0e9b      	lsrs	r3, r3, #26
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	e011      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x404>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80019d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80019d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80019d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80019dc:	2320      	movs	r3, #32
 80019de:	e003      	b.n	80019e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80019e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d106      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	2103      	movs	r1, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f9d9 	bl	8000dac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff faf4 	bl	8000fec <LL_ADC_IsEnabled>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8140 	bne.w	8001c8c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f7ff fa4d 	bl	8000eb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	4a8f      	ldr	r2, [pc, #572]	@ (8001c60 <HAL_ADC_ConfigChannel+0x67c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	f040 8131 	bne.w	8001c8c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x46e>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	3301      	adds	r3, #1
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b09      	cmp	r3, #9
 8001a48:	bf94      	ite	ls
 8001a4a:	2301      	movls	r3, #1
 8001a4c:	2300      	movhi	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	e019      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x4a2>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a62:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	e003      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	f003 031f 	and.w	r3, r3, #31
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	bf94      	ite	ls
 8001a80:	2301      	movls	r3, #1
 8001a82:	2300      	movhi	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d079      	beq.n	8001b7e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d107      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x4c2>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0e9b      	lsrs	r3, r3, #26
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	069b      	lsls	r3, r3, #26
 8001aa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001aa4:	e015      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x4ee>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ab6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	e003      	b.n	8001aca <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	069b      	lsls	r3, r3, #26
 8001ace:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x50e>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	0e9b      	lsrs	r3, r3, #26
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	e017      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x53e>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001afa:	fa93 f3a3 	rbit	r3, r3
 8001afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b02:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	e003      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	ea42 0103 	orr.w	r1, r2, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x564>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0e9b      	lsrs	r3, r3, #26
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f003 021f 	and.w	r2, r3, #31
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	051b      	lsls	r3, r3, #20
 8001b46:	e018      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x596>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001b60:	2320      	movs	r3, #32
 8001b62:	e003      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f003 021f 	and.w	r2, r3, #31
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	e081      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x5b6>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	3301      	adds	r3, #1
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b98:	e015      	b.n	8001bc6 <HAL_ADC_ConfigChannel+0x5e2>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	e003      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	069b      	lsls	r3, r3, #26
 8001bc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x602>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	0e9b      	lsrs	r3, r3, #26
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	e017      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x632>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	61bb      	str	r3, [r7, #24]
  return result;
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	ea42 0103 	orr.w	r1, r2, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x65e>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0e9b      	lsrs	r3, r3, #26
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	f003 021f 	and.w	r2, r3, #31
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	3b1e      	subs	r3, #30
 8001c3a:	051b      	lsls	r3, r3, #20
 8001c3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	e01e      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x69c>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	60fb      	str	r3, [r7, #12]
  return result;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d104      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	e006      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x688>
 8001c5e:	bf00      	nop
 8001c60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fab3 f383 	clz	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f003 021f 	and.w	r2, r3, #31
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	3b1e      	subs	r3, #30
 8001c7a:	051b      	lsls	r3, r3, #20
 8001c7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7ff f8ea 	bl	8000e60 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b3d      	ldr	r3, [pc, #244]	@ (8001d88 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d06c      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c98:	483c      	ldr	r0, [pc, #240]	@ (8001d8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001c9a:	f7ff f83f 	bl	8000d1c <LL_ADC_GetCommonPathInternalCh>
 8001c9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a3a      	ldr	r2, [pc, #232]	@ (8001d90 <HAL_ADC_ConfigChannel+0x7ac>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d127      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d121      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a35      	ldr	r2, [pc, #212]	@ (8001d94 <HAL_ADC_ConfigChannel+0x7b0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d157      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cc6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cca:	4619      	mov	r1, r3
 8001ccc:	482f      	ldr	r0, [pc, #188]	@ (8001d8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001cce:	f7ff f812 	bl	8000cf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cd2:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <HAL_ADC_ConfigChannel+0x7b4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	4a30      	ldr	r2, [pc, #192]	@ (8001d9c <HAL_ADC_ConfigChannel+0x7b8>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	099b      	lsrs	r3, r3, #6
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001cec:	e002      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f9      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cfa:	e03a      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a27      	ldr	r2, [pc, #156]	@ (8001da0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d113      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10d      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d12a      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d24:	4619      	mov	r1, r3
 8001d26:	4819      	ldr	r0, [pc, #100]	@ (8001d8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001d28:	f7fe ffe5 	bl	8000cf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d2c:	e021      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1c      	ldr	r2, [pc, #112]	@ (8001da4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d11c      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d116      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <HAL_ADC_ConfigChannel+0x7b0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d111      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d56:	4619      	mov	r1, r3
 8001d58:	480c      	ldr	r0, [pc, #48]	@ (8001d8c <HAL_ADC_ConfigChannel+0x7a8>)
 8001d5a:	f7fe ffcc 	bl	8000cf6 <LL_ADC_SetCommonPathInternalCh>
 8001d5e:	e008      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	37d8      	adds	r7, #216	@ 0xd8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	80080000 	.word	0x80080000
 8001d8c:	50040300 	.word	0x50040300
 8001d90:	c7520000 	.word	0xc7520000
 8001d94:	50040000 	.word	0x50040000
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	053e2d63 	.word	0x053e2d63
 8001da0:	cb840000 	.word	0xcb840000
 8001da4:	80000001 	.word	0x80000001

08001da8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff f962 	bl	8001088 <LL_ADC_REG_IsConversionOngoing>
 8001dc4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f983 	bl	80010d6 <LL_ADC_INJ_IsConversionOngoing>
 8001dd0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8098 	beq.w	8001f10 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d02a      	beq.n	8001e44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7e5b      	ldrb	r3, [r3, #25]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d126      	bne.n	8001e44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	7e1b      	ldrb	r3, [r3, #24]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d122      	bne.n	8001e44 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e02:	e014      	b.n	8001e2e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4a45      	ldr	r2, [pc, #276]	@ (8001f1c <ADC_ConversionStop+0x174>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d90d      	bls.n	8001e28 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e10:	f043 0210 	orr.w	r2, r3, #16
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e1c:	f043 0201 	orr.w	r2, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e074      	b.n	8001f12 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e38:	2b40      	cmp	r3, #64	@ 0x40
 8001e3a:	d1e3      	bne.n	8001e04 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2240      	movs	r2, #64	@ 0x40
 8001e42:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d014      	beq.n	8001e74 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f91a 	bl	8001088 <LL_ADC_REG_IsConversionOngoing>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00c      	beq.n	8001e74 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f8d7 	bl	8001012 <LL_ADC_IsDisableOngoing>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f8f6 	bl	8001060 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d014      	beq.n	8001ea4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f929 	bl	80010d6 <LL_ADC_INJ_IsConversionOngoing>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00c      	beq.n	8001ea4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f8bf 	bl	8001012 <LL_ADC_IsDisableOngoing>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f905 	bl	80010ae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d005      	beq.n	8001eb6 <ADC_ConversionStop+0x10e>
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d105      	bne.n	8001ebc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	617b      	str	r3, [r7, #20]
        break;
 8001eb4:	e005      	b.n	8001ec2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	617b      	str	r3, [r7, #20]
        break;
 8001eba:	e002      	b.n	8001ec2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	617b      	str	r3, [r7, #20]
        break;
 8001ec0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001ec2:	f7fe fef9 	bl	8000cb8 <HAL_GetTick>
 8001ec6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ec8:	e01b      	b.n	8001f02 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001eca:	f7fe fef5 	bl	8000cb8 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d914      	bls.n	8001f02 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e007      	b.n	8001f12 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1dc      	bne.n	8001eca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	a33fffff 	.word	0xa33fffff

08001f20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f85b 	bl	8000fec <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d169      	bne.n	8002010 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	4b36      	ldr	r3, [pc, #216]	@ (800201c <ADC_Enable+0xfc>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00d      	beq.n	8001f66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e055      	b.n	8002012 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff f816 	bl	8000f9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f70:	482b      	ldr	r0, [pc, #172]	@ (8002020 <ADC_Enable+0x100>)
 8001f72:	f7fe fed3 	bl	8000d1c <LL_ADC_GetCommonPathInternalCh>
 8001f76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <ADC_Enable+0x104>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <ADC_Enable+0x108>)
 8001f88:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f9a:	e002      	b.n	8001fa2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fe86 	bl	8000cb8 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fae:	e028      	b.n	8002002 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f819 	bl	8000fec <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d104      	bne.n	8001fca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ffe9 	bl	8000f9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fca:	f7fe fe75 	bl	8000cb8 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d914      	bls.n	8002002 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d00d      	beq.n	8002002 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fea:	f043 0210 	orr.w	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d1cf      	bne.n	8001fb0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	8000003f 	.word	0x8000003f
 8002020:	50040300 	.word	0x50040300
 8002024:	20000000 	.word	0x20000000
 8002028:	053e2d63 	.word	0x053e2d63

0800202c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe ffea 	bl	8001012 <LL_ADC_IsDisableOngoing>
 800203e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe ffd1 	bl	8000fec <LL_ADC_IsEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d047      	beq.n	80020e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d144      	bne.n	80020e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 030d 	and.w	r3, r3, #13
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10c      	bne.n	800207e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe ffab 	bl	8000fc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2203      	movs	r2, #3
 8002074:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002076:	f7fe fe1f 	bl	8000cb8 <HAL_GetTick>
 800207a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800207c:	e029      	b.n	80020d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e023      	b.n	80020e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800209a:	f7fe fe0d 	bl	8000cb8 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d914      	bls.n	80020d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e007      	b.n	80020e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1dc      	bne.n	800209a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211e:	4a04      	ldr	r2, [pc, #16]	@ (8002130 <__NVIC_SetPriorityGrouping+0x44>)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	60d3      	str	r3, [r2, #12]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002138:	4b04      	ldr	r3, [pc, #16]	@ (800214c <__NVIC_GetPriorityGrouping+0x18>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	f003 0307 	and.w	r3, r3, #7
}
 8002142:	4618      	mov	r0, r3
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	db0b      	blt.n	800217a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	f003 021f 	and.w	r2, r3, #31
 8002168:	4907      	ldr	r1, [pc, #28]	@ (8002188 <__NVIC_EnableIRQ+0x38>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	2001      	movs	r0, #1
 8002172:	fa00 f202 	lsl.w	r2, r0, r2
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	db0a      	blt.n	80021b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <__NVIC_SetPriority+0x4c>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	0112      	lsls	r2, r2, #4
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	440b      	add	r3, r1
 80021b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b4:	e00a      	b.n	80021cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4908      	ldr	r1, [pc, #32]	@ (80021dc <__NVIC_SetPriority+0x50>)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	3b04      	subs	r3, #4
 80021c4:	0112      	lsls	r2, r2, #4
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	440b      	add	r3, r1
 80021ca:	761a      	strb	r2, [r3, #24]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000e100 	.word	0xe000e100
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f1c3 0307 	rsb	r3, r3, #7
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	bf28      	it	cs
 80021fe:	2304      	movcs	r3, #4
 8002200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3304      	adds	r3, #4
 8002206:	2b06      	cmp	r3, #6
 8002208:	d902      	bls.n	8002210 <NVIC_EncodePriority+0x30>
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3b03      	subs	r3, #3
 800220e:	e000      	b.n	8002212 <NVIC_EncodePriority+0x32>
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002214:	f04f 32ff 	mov.w	r2, #4294967295
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	401a      	ands	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	43d9      	mvns	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	4313      	orrs	r3, r2
         );
}
 800223a:	4618      	mov	r0, r3
 800223c:	3724      	adds	r7, #36	@ 0x24
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002258:	d301      	bcc.n	800225e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225a:	2301      	movs	r3, #1
 800225c:	e00f      	b.n	800227e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <SysTick_Config+0x40>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002266:	210f      	movs	r1, #15
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f7ff ff8e 	bl	800218c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <SysTick_Config+0x40>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002276:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <SysTick_Config+0x40>)
 8002278:	2207      	movs	r2, #7
 800227a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e010 	.word	0xe000e010

0800228c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff29 	bl	80020ec <__NVIC_SetPriorityGrouping>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022b4:	f7ff ff3e 	bl	8002134 <__NVIC_GetPriorityGrouping>
 80022b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	6978      	ldr	r0, [r7, #20]
 80022c0:	f7ff ff8e 	bl	80021e0 <NVIC_EncodePriority>
 80022c4:	4602      	mov	r2, r0
 80022c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <__NVIC_SetPriority>
}
 80022d2:	bf00      	nop
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff31 	bl	8002150 <__NVIC_EnableIRQ>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff ffa2 	bl	8002248 <SysTick_Config>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231e:	e148      	b.n	80025b2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 813a 	beq.w	80025ac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d005      	beq.n	8002350 <HAL_GPIO_Init+0x40>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d130      	bne.n	80023b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002386:	2201      	movs	r2, #1
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f003 0201 	and.w	r2, r3, #1
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d017      	beq.n	80023ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d123      	bne.n	8002442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	220f      	movs	r2, #15
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4013      	ands	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	6939      	ldr	r1, [r7, #16]
 800243e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0203 	and.w	r2, r3, #3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8094 	beq.w	80025ac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002484:	4b52      	ldr	r3, [pc, #328]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002488:	4a51      	ldr	r2, [pc, #324]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002490:	4b4f      	ldr	r3, [pc, #316]	@ (80025d0 <HAL_GPIO_Init+0x2c0>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800249c:	4a4d      	ldr	r2, [pc, #308]	@ (80025d4 <HAL_GPIO_Init+0x2c4>)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	220f      	movs	r2, #15
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024c6:	d00d      	beq.n	80024e4 <HAL_GPIO_Init+0x1d4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a43      	ldr	r2, [pc, #268]	@ (80025d8 <HAL_GPIO_Init+0x2c8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d007      	beq.n	80024e0 <HAL_GPIO_Init+0x1d0>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a42      	ldr	r2, [pc, #264]	@ (80025dc <HAL_GPIO_Init+0x2cc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_GPIO_Init+0x1cc>
 80024d8:	2302      	movs	r3, #2
 80024da:	e004      	b.n	80024e6 <HAL_GPIO_Init+0x1d6>
 80024dc:	2307      	movs	r3, #7
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_Init+0x1d6>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_GPIO_Init+0x1d6>
 80024e4:	2300      	movs	r3, #0
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	f002 0203 	and.w	r2, r2, #3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	4093      	lsls	r3, r2
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024f6:	4937      	ldr	r1, [pc, #220]	@ (80025d4 <HAL_GPIO_Init+0x2c4>)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	089b      	lsrs	r3, r3, #2
 80024fc:	3302      	adds	r3, #2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002504:	4b36      	ldr	r3, [pc, #216]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002528:	4a2d      	ldr	r2, [pc, #180]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800252e:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002552:	4a23      	ldr	r2, [pc, #140]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002558:	4b21      	ldr	r3, [pc, #132]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800257c:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002582:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	43db      	mvns	r3, r3
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025a6:	4a0e      	ldr	r2, [pc, #56]	@ (80025e0 <HAL_GPIO_Init+0x2d0>)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3301      	adds	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f aeaf 	bne.w	8002320 <HAL_GPIO_Init+0x10>
  }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	48000400 	.word	0x48000400
 80025dc:	48000800 	.word	0x48000800
 80025e0:	40010400 	.word	0x40010400

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002600:	e002      	b.n	8002608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800261e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000

08002634 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <HAL_PWREx_GetVoltageRange+0x18>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40007000 	.word	0x40007000

08002650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800265e:	d130      	bne.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002660:	4b23      	ldr	r3, [pc, #140]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800266c:	d038      	beq.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800266e:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002676:	4a1e      	ldr	r2, [pc, #120]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800267e:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2232      	movs	r2, #50	@ 0x32
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	4a1b      	ldr	r2, [pc, #108]	@ (80026f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002694:	e002      	b.n	800269c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3b01      	subs	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800269c:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a8:	d102      	bne.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f2      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026b0:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026bc:	d110      	bne.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e00f      	b.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ce:	d007      	beq.n	80026e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026d0:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026d8:	4a05      	ldr	r2, [pc, #20]	@ (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40007000 	.word	0x40007000
 80026f4:	20000000 	.word	0x20000000
 80026f8:	431bde83 	.word	0x431bde83

080026fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d102      	bne.n	8002710 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	f000 bc02 	b.w	8002f14 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002710:	4b96      	ldr	r3, [pc, #600]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800271a:	4b94      	ldr	r3, [pc, #592]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80e4 	beq.w	80028fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_RCC_OscConfig+0x4c>
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	f040 808b 	bne.w	8002856 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b01      	cmp	r3, #1
 8002744:	f040 8087 	bne.w	8002856 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002748:	4b88      	ldr	r3, [pc, #544]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x64>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e3d9      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	4b81      	ldr	r3, [pc, #516]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <HAL_RCC_OscConfig+0x7e>
 8002770:	4b7e      	ldr	r3, [pc, #504]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002778:	e005      	b.n	8002786 <HAL_RCC_OscConfig+0x8a>
 800277a:	4b7c      	ldr	r3, [pc, #496]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002786:	4293      	cmp	r3, r2
 8002788:	d223      	bcs.n	80027d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fd8c 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e3ba      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279e:	4b73      	ldr	r3, [pc, #460]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a72      	ldr	r2, [pc, #456]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b70      	ldr	r3, [pc, #448]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	496d      	ldr	r1, [pc, #436]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027bc:	4b6b      	ldr	r3, [pc, #428]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	4968      	ldr	r1, [pc, #416]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e025      	b.n	800281e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027d2:	4b66      	ldr	r3, [pc, #408]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a65      	ldr	r2, [pc, #404]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b63      	ldr	r3, [pc, #396]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4960      	ldr	r1, [pc, #384]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f0:	4b5e      	ldr	r3, [pc, #376]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	495b      	ldr	r1, [pc, #364]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd4c 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e37a      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800281e:	f000 fc81 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8002822:	4602      	mov	r2, r0
 8002824:	4b51      	ldr	r3, [pc, #324]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	4950      	ldr	r1, [pc, #320]	@ (8002970 <HAL_RCC_OscConfig+0x274>)
 8002830:	5ccb      	ldrb	r3, [r1, r3]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
 800283a:	4a4e      	ldr	r2, [pc, #312]	@ (8002974 <HAL_RCC_OscConfig+0x278>)
 800283c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800283e:	4b4e      	ldr	r3, [pc, #312]	@ (8002978 <HAL_RCC_OscConfig+0x27c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe f9e8 	bl	8000c18 <HAL_InitTick>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d052      	beq.n	80028f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	e35e      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d032      	beq.n	80028c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800285e:	4b43      	ldr	r3, [pc, #268]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a42      	ldr	r2, [pc, #264]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800286a:	f7fe fa25 	bl	8000cb8 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002872:	f7fe fa21 	bl	8000cb8 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e347      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002884:	4b39      	ldr	r3, [pc, #228]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002890:	4b36      	ldr	r3, [pc, #216]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a35      	ldr	r2, [pc, #212]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002896:	f043 0308 	orr.w	r3, r3, #8
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b33      	ldr	r3, [pc, #204]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4930      	ldr	r1, [pc, #192]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ae:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	492b      	ldr	r1, [pc, #172]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
 80028c2:	e01a      	b.n	80028fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028c4:	4b29      	ldr	r3, [pc, #164]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a28      	ldr	r2, [pc, #160]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d0:	f7fe f9f2 	bl	8000cb8 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d8:	f7fe f9ee 	bl	8000cb8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e314      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ea:	4b20      	ldr	r3, [pc, #128]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1dc>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d073      	beq.n	80029ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x21c>
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d10e      	bne.n	8002930 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d10b      	bne.n	8002930 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	4b14      	ldr	r3, [pc, #80]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d063      	beq.n	80029ec <HAL_RCC_OscConfig+0x2f0>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d15f      	bne.n	80029ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e2f1      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x24c>
 800293a:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e025      	b.n	8002994 <HAL_RCC_OscConfig+0x298>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002950:	d114      	bne.n	800297c <HAL_RCC_OscConfig+0x280>
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a05      	ldr	r2, [pc, #20]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a02      	ldr	r2, [pc, #8]	@ (800296c <HAL_RCC_OscConfig+0x270>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e013      	b.n	8002994 <HAL_RCC_OscConfig+0x298>
 800296c:	40021000 	.word	0x40021000
 8002970:	080049ac 	.word	0x080049ac
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004
 800297c:	4ba0      	ldr	r3, [pc, #640]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a9f      	ldr	r2, [pc, #636]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b9d      	ldr	r3, [pc, #628]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a9c      	ldr	r2, [pc, #624]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe f98c 	bl	8000cb8 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7fe f988 	bl	8000cb8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e2ae      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b6:	4b92      	ldr	r3, [pc, #584]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2a8>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe f978 	bl	8000cb8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe f974 	bl	8000cb8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e29a      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029de:	4b88      	ldr	r3, [pc, #544]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x2d0>
 80029ea:	e000      	b.n	80029ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d060      	beq.n	8002abc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_OscConfig+0x310>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d116      	bne.n	8002a3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x328>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e277      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b76      	ldr	r3, [pc, #472]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	4973      	ldr	r1, [pc, #460]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a38:	e040      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d023      	beq.n	8002a8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a42:	4b6f      	ldr	r3, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe f933 	bl	8000cb8 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a56:	f7fe f92f 	bl	8000cb8 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e255      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a68:	4b65      	ldr	r3, [pc, #404]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b62      	ldr	r3, [pc, #392]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	495f      	ldr	r1, [pc, #380]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
 8002a88:	e018      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe f90f 	bl	8000cb8 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7fe f90b 	bl	8000cb8 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e231      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab0:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d03c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe f8ea 	bl	8000cb8 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe f8e6 	bl	8000cb8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e20c      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x3ec>
 8002b08:	e01b      	b.n	8002b42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b10:	4a3b      	ldr	r2, [pc, #236]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7fe f8cd 	bl	8000cb8 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b22:	f7fe f8c9 	bl	8000cb8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1ef      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b34:	4b32      	ldr	r3, [pc, #200]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ef      	bne.n	8002b22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80a6 	beq.w	8002c9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b50:	2300      	movs	r3, #0
 8002b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b54:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10d      	bne.n	8002b7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b27      	ldr	r3, [pc, #156]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b6c:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7c:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d118      	bne.n	8002bba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b94:	f7fe f890 	bl	8000cb8 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fe f88c 	bl	8000cb8 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e1b2      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <HAL_RCC_OscConfig+0x508>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d108      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x4d8>
 8002bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd2:	e029      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d115      	bne.n	8002c08 <HAL_RCC_OscConfig+0x50c>
 8002bdc:	4b08      	ldr	r3, [pc, #32]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bec:	4b04      	ldr	r3, [pc, #16]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a03      	ldr	r2, [pc, #12]	@ (8002c00 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	4b9a      	ldr	r3, [pc, #616]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0e:	4a99      	ldr	r2, [pc, #612]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c18:	4b96      	ldr	r3, [pc, #600]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1e:	4a95      	ldr	r2, [pc, #596]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c20:	f023 0304 	bic.w	r3, r3, #4
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d016      	beq.n	8002c5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe f842 	bl	8000cb8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c38:	f7fe f83e 	bl	8000cb8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e162      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4e:	4b89      	ldr	r3, [pc, #548]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ed      	beq.n	8002c38 <HAL_RCC_OscConfig+0x53c>
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe f82b 	bl	8000cb8 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe f827 	bl	8000cb8 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e14b      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ed      	bne.n	8002c66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7ffb      	ldrb	r3, [r7, #31]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b78      	ldr	r3, [pc, #480]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c94:	4a77      	ldr	r2, [pc, #476]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01c      	beq.n	8002cea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cb0:	4b70      	ldr	r3, [pc, #448]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cb6:	4a6f      	ldr	r2, [pc, #444]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fd fffa 	bl	8000cb8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc8:	f7fd fff6 	bl	8000cb8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e11c      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cda:	4b66      	ldr	r3, [pc, #408]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ef      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x5cc>
 8002ce8:	e01b      	b.n	8002d22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cea:	4b62      	ldr	r3, [pc, #392]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cf0:	4a60      	ldr	r2, [pc, #384]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7fd ffdd 	bl	8000cb8 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d02:	f7fd ffd9 	bl	8000cb8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0ff      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d14:	4b57      	ldr	r3, [pc, #348]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ef      	bne.n	8002d02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80f3 	beq.w	8002f12 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	f040 80c9 	bne.w	8002ec8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d36:	4b4f      	ldr	r3, [pc, #316]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0203 	and.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d12c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d54:	3b01      	subs	r3, #1
 8002d56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d123      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d11b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d113      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d109      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	085b      	lsrs	r3, r3, #1
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d06b      	beq.n	8002e7c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d062      	beq.n	8002e70 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002daa:	4b32      	ldr	r3, [pc, #200]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e0ac      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dba:	4b2e      	ldr	r3, [pc, #184]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002dc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc6:	f7fd ff77 	bl	8000cb8 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dce:	f7fd ff73 	bl	8000cb8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e099      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de0:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	4b21      	ldr	r3, [pc, #132]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	4b21      	ldr	r3, [pc, #132]	@ (8002e78 <HAL_RCC_OscConfig+0x77c>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0112      	lsls	r2, r2, #4
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e06:	0212      	lsls	r2, r2, #8
 8002e08:	4311      	orrs	r1, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e0e:	0852      	lsrs	r2, r2, #1
 8002e10:	3a01      	subs	r2, #1
 8002e12:	0552      	lsls	r2, r2, #21
 8002e14:	4311      	orrs	r1, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e1a:	0852      	lsrs	r2, r2, #1
 8002e1c:	3a01      	subs	r2, #1
 8002e1e:	0652      	lsls	r2, r2, #25
 8002e20:	4311      	orrs	r1, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e26:	06d2      	lsls	r2, r2, #27
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	4912      	ldr	r1, [pc, #72]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e30:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0f      	ldr	r2, [pc, #60]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a0c      	ldr	r2, [pc, #48]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e48:	f7fd ff36 	bl	8000cb8 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fd ff32 	bl	8000cb8 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e058      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <HAL_RCC_OscConfig+0x778>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6e:	e050      	b.n	8002f12 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04f      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
 8002e74:	40021000 	.word	0x40021000
 8002e78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7c:	4b27      	ldr	r3, [pc, #156]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d144      	bne.n	8002f12 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a23      	ldr	r2, [pc, #140]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e94:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ea0:	f7fd ff0a 	bl	8000cb8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fd ff06 	bl	8000cb8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e02c      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x7ac>
 8002ec6:	e024      	b.n	8002f12 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d01f      	beq.n	8002f0e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b13      	ldr	r3, [pc, #76]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002ed4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fd feed 	bl	8000cb8 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee2:	f7fd fee9 	bl	8000cb8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e00f      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4905      	ldr	r1, [pc, #20]	@ (8002f1c <HAL_RCC_OscConfig+0x820>)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x824>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60cb      	str	r3, [r1, #12]
 8002f0c:	e001      	b.n	8002f12 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	feeefffc 	.word	0xfeeefffc

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0e7      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b75      	ldr	r3, [pc, #468]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b72      	ldr	r3, [pc, #456]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4970      	ldr	r1, [pc, #448]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0cf      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4960      	ldr	r1, [pc, #384]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d04c      	beq.n	800303c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	4b5a      	ldr	r3, [pc, #360]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d121      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0a6      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e09a      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fda:	4b4e      	ldr	r3, [pc, #312]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e08e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fea:	4b4a      	ldr	r3, [pc, #296]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e086      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4943      	ldr	r1, [pc, #268]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fd fe54 	bl	8000cb8 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fd fe50 	bl	8000cb8 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e06e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003054:	429a      	cmp	r2, r3
 8003056:	d208      	bcs.n	800306a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	492b      	ldr	r1, [pc, #172]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d210      	bcs.n	800309a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4923      	ldr	r1, [pc, #140]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003088:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e036      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4918      	ldr	r1, [pc, #96]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c4:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4910      	ldr	r1, [pc, #64]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d8:	f000 f824 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	490b      	ldr	r1, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1f4>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_RCC_ClockConfig+0x1f8>)
 80030f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1fc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fd8b 	bl	8000c18 <HAL_InitTick>
 8003102:	4603      	mov	r3, r0
 8003104:	72fb      	strb	r3, [r7, #11]

  return status;
 8003106:	7afb      	ldrb	r3, [r7, #11]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	080049ac 	.word	0x080049ac
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4b3e      	ldr	r3, [pc, #248]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313c:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d121      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d11e      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003158:	4b34      	ldr	r3, [pc, #208]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003164:	4b31      	ldr	r3, [pc, #196]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003174:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003180:	4a2b      	ldr	r2, [pc, #172]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800319c:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e004      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a8:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d134      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xa6>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d003      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xac>
 80031c8:	e005      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 80031cc:	617b      	str	r3, [r7, #20]
      break;
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031d2:	617b      	str	r3, [r7, #20]
      break;
 80031d4:	e002      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	617b      	str	r3, [r7, #20]
      break;
 80031da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	3301      	adds	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fb03 f202 	mul.w	r2, r3, r2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0e5b      	lsrs	r3, r3, #25
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	3301      	adds	r3, #1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800321c:	69bb      	ldr	r3, [r7, #24]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	080049c4 	.word	0x080049c4
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200

0800323c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	080049bc 	.word	0x080049bc

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003284:	f7ff ffda 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	080049bc 	.word	0x080049bc

080032ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032c4:	f7ff f9b6 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 80032c8:	6178      	str	r0, [r7, #20]
 80032ca:	e014      	b.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032e4:	f7ff f9a6 	bl	8002634 <HAL_PWREx_GetVoltageRange>
 80032e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032fc:	d10b      	bne.n	8003316 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b80      	cmp	r3, #128	@ 0x80
 8003302:	d919      	bls.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2ba0      	cmp	r3, #160	@ 0xa0
 8003308:	d902      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800330a:	2302      	movs	r3, #2
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e013      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e010      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b80      	cmp	r3, #128	@ 0x80
 800331a:	d902      	bls.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800331c:	2303      	movs	r3, #3
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e00a      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d102      	bne.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003328:	2302      	movs	r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e004      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b70      	cmp	r3, #112	@ 0x70
 8003332:	d101      	bne.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 0207 	bic.w	r2, r3, #7
 8003340:	4909      	ldr	r1, [pc, #36]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003348:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	40022000 	.word	0x40022000

0800336c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003374:	2300      	movs	r3, #0
 8003376:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003378:	2300      	movs	r3, #0
 800337a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003384:	2b00      	cmp	r3, #0
 8003386:	d031      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003390:	d01a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003392:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003396:	d814      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d009      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800339c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a0:	d10f      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80033a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4a5c      	ldr	r2, [pc, #368]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ae:	e00c      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f9de 	bl	8003778 <RCCEx_PLLSAI1_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c0:	e003      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	74fb      	strb	r3, [r7, #19]
      break;
 80033c6:	e000      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80033c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033d0:	4b51      	ldr	r3, [pc, #324]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033de:	494e      	ldr	r1, [pc, #312]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033e6:	e001      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 809e 	beq.w	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fa:	2300      	movs	r3, #0
 80033fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033fe:	4b46      	ldr	r3, [pc, #280]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b40      	ldr	r3, [pc, #256]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003418:	4a3f      	ldr	r2, [pc, #252]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003420:	4b3d      	ldr	r3, [pc, #244]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342c:	2301      	movs	r3, #1
 800342e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003430:	4b3a      	ldr	r3, [pc, #232]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a39      	ldr	r2, [pc, #228]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003436:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800343a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800343c:	f7fd fc3c 	bl	8000cb8 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003442:	e009      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fd fc38 	bl	8000cb8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d902      	bls.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	74fb      	strb	r3, [r7, #19]
        break;
 8003456:	e005      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003458:	4b30      	ldr	r3, [pc, #192]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ef      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d15a      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800346a:	4b2b      	ldr	r3, [pc, #172]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003470:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003474:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01e      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	429a      	cmp	r2, r3
 8003484:	d019      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003486:	4b24      	ldr	r3, [pc, #144]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003490:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003492:	4b21      	ldr	r3, [pc, #132]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	4a1f      	ldr	r2, [pc, #124]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034b2:	4a19      	ldr	r2, [pc, #100]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d016      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fbf8 	bl	8000cb8 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ca:	e00b      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f7fd fbf4 	bl	8000cb8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d902      	bls.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	74fb      	strb	r3, [r7, #19]
            break;
 80034e2:	e006      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ec      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003506:	4904      	ldr	r1, [pc, #16]	@ (8003518 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800350e:	e009      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
 8003514:	e006      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003524:	7c7b      	ldrb	r3, [r7, #17]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d105      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352a:	4b8a      	ldr	r3, [pc, #552]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	4a89      	ldr	r2, [pc, #548]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003534:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003542:	4b84      	ldr	r3, [pc, #528]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003548:	f023 0203 	bic.w	r2, r3, #3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4980      	ldr	r1, [pc, #512]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003564:	4b7b      	ldr	r3, [pc, #492]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f023 020c 	bic.w	r2, r3, #12
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	4978      	ldr	r1, [pc, #480]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003586:	4b73      	ldr	r3, [pc, #460]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	496f      	ldr	r1, [pc, #444]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b6:	4967      	ldr	r1, [pc, #412]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035ca:	4b62      	ldr	r3, [pc, #392]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	495e      	ldr	r1, [pc, #376]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ec:	4b59      	ldr	r3, [pc, #356]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	4956      	ldr	r1, [pc, #344]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800360e:	4b51      	ldr	r3, [pc, #324]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003614:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	494d      	ldr	r1, [pc, #308]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d028      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003630:	4b48      	ldr	r3, [pc, #288]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003636:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	4945      	ldr	r1, [pc, #276]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800364e:	d106      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003650:	4b40      	ldr	r3, [pc, #256]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365a:	60d3      	str	r3, [r2, #12]
 800365c:	e011      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003666:	d10c      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	2101      	movs	r1, #1
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f882 	bl	8003778 <RCCEx_PLLSAI1_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d028      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800368e:	4b31      	ldr	r3, [pc, #196]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003694:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	492d      	ldr	r1, [pc, #180]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ac:	d106      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ae:	4b29      	ldr	r3, [pc, #164]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4a28      	ldr	r2, [pc, #160]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b8:	60d3      	str	r3, [r2, #12]
 80036ba:	e011      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f853 	bl	8003778 <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036d6:	7cfb      	ldrb	r3, [r7, #19]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80036dc:	7cfb      	ldrb	r3, [r7, #19]
 80036de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01c      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ec:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036fa:	4916      	ldr	r1, [pc, #88]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800370a:	d10c      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	2102      	movs	r1, #2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f830 	bl	8003778 <RCCEx_PLLSAI1_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003738:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003740:	4904      	ldr	r1, [pc, #16]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003748:	7cbb      	ldrb	r3, [r7, #18]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000

08003758 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a04      	ldr	r2, [pc, #16]	@ (8003774 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	6013      	str	r3, [r2, #0]
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000

08003778 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003786:	4b74      	ldr	r3, [pc, #464]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d018      	beq.n	80037c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003792:	4b71      	ldr	r3, [pc, #452]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0203 	and.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10d      	bne.n	80037be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
       ||
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
       ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d047      	beq.n	800384e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	73fb      	strb	r3, [r7, #15]
 80037c2:	e044      	b.n	800384e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d018      	beq.n	80037fe <RCCEx_PLLSAI1_Config+0x86>
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d825      	bhi.n	800381c <RCCEx_PLLSAI1_Config+0xa4>
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d002      	beq.n	80037da <RCCEx_PLLSAI1_Config+0x62>
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d009      	beq.n	80037ec <RCCEx_PLLSAI1_Config+0x74>
 80037d8:	e020      	b.n	800381c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037da:	4b5f      	ldr	r3, [pc, #380]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d11d      	bne.n	8003822 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ea:	e01a      	b.n	8003822 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037ec:	4b5a      	ldr	r3, [pc, #360]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d116      	bne.n	8003826 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fc:	e013      	b.n	8003826 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037fe:	4b56      	ldr	r3, [pc, #344]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800380a:	4b53      	ldr	r3, [pc, #332]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800381a:	e006      	b.n	800382a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e004      	b.n	800382c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800382a:	bf00      	nop
    }

    if(status == HAL_OK)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003832:	4b49      	ldr	r3, [pc, #292]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	3b01      	subs	r3, #1
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	430b      	orrs	r3, r1
 8003848:	4943      	ldr	r1, [pc, #268]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d17c      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003854:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a3f      	ldr	r2, [pc, #252]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800385a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800385e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fd fa2a 	bl	8000cb8 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003866:	e009      	b.n	800387c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003868:	f7fd fa26 	bl	8000cb8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d902      	bls.n	800387c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	73fb      	strb	r3, [r7, #15]
        break;
 800387a:	e005      	b.n	8003888 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800387c:	4b36      	ldr	r3, [pc, #216]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ef      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d15f      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d110      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003894:	4b30      	ldr	r3, [pc, #192]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800389c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6892      	ldr	r2, [r2, #8]
 80038a4:	0211      	lsls	r1, r2, #8
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	06d2      	lsls	r2, r2, #27
 80038ac:	430a      	orrs	r2, r1
 80038ae:	492a      	ldr	r1, [pc, #168]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
 80038b4:	e027      	b.n	8003906 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d112      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038bc:	4b26      	ldr	r3, [pc, #152]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	0211      	lsls	r1, r2, #8
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6912      	ldr	r2, [r2, #16]
 80038d2:	0852      	lsrs	r2, r2, #1
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0552      	lsls	r2, r2, #21
 80038d8:	430a      	orrs	r2, r1
 80038da:	491f      	ldr	r1, [pc, #124]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
 80038e0:	e011      	b.n	8003906 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6892      	ldr	r2, [r2, #8]
 80038f2:	0211      	lsls	r1, r2, #8
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6952      	ldr	r2, [r2, #20]
 80038f8:	0852      	lsrs	r2, r2, #1
 80038fa:	3a01      	subs	r2, #1
 80038fc:	0652      	lsls	r2, r2, #25
 80038fe:	430a      	orrs	r2, r1
 8003900:	4915      	ldr	r1, [pc, #84]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003906:	4b14      	ldr	r3, [pc, #80]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800390c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003910:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fd f9d1 	bl	8000cb8 <HAL_GetTick>
 8003916:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003918:	e009      	b.n	800392e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800391a:	f7fd f9cd 	bl	8000cb8 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d902      	bls.n	800392e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	73fb      	strb	r3, [r7, #15]
          break;
 800392c:	e005      	b.n	800393a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800392e:	4b0a      	ldr	r3, [pc, #40]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0ef      	beq.n	800391a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4903      	ldr	r1, [pc, #12]	@ (8003958 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394a:	4313      	orrs	r3, r2
 800394c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800394e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e049      	b.n	8003a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd f83c 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 f9ba 	bl	8003d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d001      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e03b      	b.n	8003a9c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x4e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIM_Base_Start_IT+0x4e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a15      	ldr	r2, [pc, #84]	@ (8003aac <HAL_TIM_Base_Start_IT+0xa0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d115      	bne.n	8003a86 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xa4>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d015      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x8c>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a72:	d011      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	e008      	b.n	8003a98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e000      	b.n	8003a9a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	00010007 	.word	0x00010007

08003ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f8e9 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8db 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8ec 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0204 	mvn.w	r2, #4
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8c3 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8b5 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f8c6 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f89d 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f88f 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f8a0 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f877 	bl	8003cd6 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f869 	bl	8003cc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f87a 	bl	8003cea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0201 	mvn.w	r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fc fe1c 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f943 	bl	8003ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00c      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f93b 	bl	8003ee8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00c      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f834 	bl	8003cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00c      	beq.n	8003cba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f06f 0220 	mvn.w	r2, #32
 8003cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f903 	bl	8003ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a30      	ldr	r2, [pc, #192]	@ (8003de8 <TIM_Base_SetConfig+0xd4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0x20>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d32:	d108      	bne.n	8003d46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a27      	ldr	r2, [pc, #156]	@ (8003de8 <TIM_Base_SetConfig+0xd4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <TIM_Base_SetConfig+0x52>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d54:	d007      	beq.n	8003d66 <TIM_Base_SetConfig+0x52>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a24      	ldr	r2, [pc, #144]	@ (8003dec <TIM_Base_SetConfig+0xd8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_Base_SetConfig+0x52>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a23      	ldr	r2, [pc, #140]	@ (8003df0 <TIM_Base_SetConfig+0xdc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d108      	bne.n	8003d78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <TIM_Base_SetConfig+0xd4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0xa0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a11      	ldr	r2, [pc, #68]	@ (8003dec <TIM_Base_SetConfig+0xd8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0xa0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a10      	ldr	r2, [pc, #64]	@ (8003df0 <TIM_Base_SetConfig+0xdc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d103      	bne.n	8003dbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d105      	bne.n	8003dda <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f023 0201 	bic.w	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	611a      	str	r2, [r3, #16]
  }
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400

08003df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e04f      	b.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a21      	ldr	r2, [pc, #132]	@ (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a14      	ldr	r2, [pc, #80]	@ (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d009      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e74:	d004      	beq.n	8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a10      	ldr	r2, [pc, #64]	@ (8003ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10c      	bne.n	8003e9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40012c00 	.word	0x40012c00
 8003ebc:	40014000 	.word	0x40014000

08003ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e040      	b.n	8003f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fc fd94 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	@ 0x24
 8003f28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fade 	bl	8004504 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8af 	bl	80040ac <UART_SetConfig>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e01b      	b.n	8003f90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb5d 	bl	8004648 <UART_CheckIdleState>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	@ 0x28
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d177      	bne.n	80040a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_UART_Transmit+0x24>
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e070      	b.n	80040a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2221      	movs	r2, #33	@ 0x21
 8003fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fce:	f7fc fe73 	bl	8000cb8 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	88fa      	ldrh	r2, [r7, #6]
 8003fd8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	88fa      	ldrh	r2, [r7, #6]
 8003fe0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fec:	d108      	bne.n	8004000 <HAL_UART_Transmit+0x68>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e003      	b.n	8004008 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004008:	e02f      	b.n	800406a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	@ 0x80
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 fbbf 	bl	8004798 <UART_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e03b      	b.n	80040a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800403c:	b292      	uxth	r2, r2
 800403e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	3302      	adds	r3, #2
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	e007      	b.n	8004058 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3301      	adds	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1c9      	bne.n	800400a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	2140      	movs	r1, #64	@ 0x40
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fb89 	bl	8004798 <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e005      	b.n	80040a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040b0:	b08a      	sub	sp, #40	@ 0x28
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4bb4      	ldr	r3, [pc, #720]	@ (80043ac <UART_SetConfig+0x300>)
 80040dc:	4013      	ands	r3, r2
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	6812      	ldr	r2, [r2, #0]
 80040e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4aa9      	ldr	r2, [pc, #676]	@ (80043b0 <UART_SetConfig+0x304>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d004      	beq.n	8004118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004114:	4313      	orrs	r3, r2
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	430a      	orrs	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4aa0      	ldr	r2, [pc, #640]	@ (80043b4 <UART_SetConfig+0x308>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d126      	bne.n	8004184 <UART_SetConfig+0xd8>
 8004136:	4ba0      	ldr	r3, [pc, #640]	@ (80043b8 <UART_SetConfig+0x30c>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	2b03      	cmp	r3, #3
 8004142:	d81b      	bhi.n	800417c <UART_SetConfig+0xd0>
 8004144:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <UART_SetConfig+0xa0>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800416d 	.word	0x0800416d
 8004154:	08004165 	.word	0x08004165
 8004158:	08004175 	.word	0x08004175
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004162:	e080      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004164:	2302      	movs	r3, #2
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416a:	e07c      	b.n	8004266 <UART_SetConfig+0x1ba>
 800416c:	2304      	movs	r3, #4
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004172:	e078      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417a:	e074      	b.n	8004266 <UART_SetConfig+0x1ba>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004182:	e070      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a8c      	ldr	r2, [pc, #560]	@ (80043bc <UART_SetConfig+0x310>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d138      	bne.n	8004200 <UART_SetConfig+0x154>
 800418e:	4b8a      	ldr	r3, [pc, #552]	@ (80043b8 <UART_SetConfig+0x30c>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d82d      	bhi.n	80041f8 <UART_SetConfig+0x14c>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <UART_SetConfig+0xf8>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041f9 	.word	0x080041f9
 80041b0:	080041f9 	.word	0x080041f9
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	080041f9 	.word	0x080041f9
 80041bc:	080041f9 	.word	0x080041f9
 80041c0:	080041f9 	.word	0x080041f9
 80041c4:	080041e1 	.word	0x080041e1
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	080041f1 	.word	0x080041f1
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041de:	e042      	b.n	8004266 <UART_SetConfig+0x1ba>
 80041e0:	2302      	movs	r3, #2
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e6:	e03e      	b.n	8004266 <UART_SetConfig+0x1ba>
 80041e8:	2304      	movs	r3, #4
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e03a      	b.n	8004266 <UART_SetConfig+0x1ba>
 80041f0:	2308      	movs	r3, #8
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f6:	e036      	b.n	8004266 <UART_SetConfig+0x1ba>
 80041f8:	2310      	movs	r3, #16
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fe:	e032      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a6a      	ldr	r2, [pc, #424]	@ (80043b0 <UART_SetConfig+0x304>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d12a      	bne.n	8004260 <UART_SetConfig+0x1b4>
 800420a:	4b6b      	ldr	r3, [pc, #428]	@ (80043b8 <UART_SetConfig+0x30c>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004210:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004214:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004218:	d01a      	beq.n	8004250 <UART_SetConfig+0x1a4>
 800421a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800421e:	d81b      	bhi.n	8004258 <UART_SetConfig+0x1ac>
 8004220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004224:	d00c      	beq.n	8004240 <UART_SetConfig+0x194>
 8004226:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800422a:	d815      	bhi.n	8004258 <UART_SetConfig+0x1ac>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <UART_SetConfig+0x18c>
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004234:	d008      	beq.n	8004248 <UART_SetConfig+0x19c>
 8004236:	e00f      	b.n	8004258 <UART_SetConfig+0x1ac>
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423e:	e012      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004240:	2302      	movs	r3, #2
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004246:	e00e      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424e:	e00a      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004256:	e006      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425e:	e002      	b.n	8004266 <UART_SetConfig+0x1ba>
 8004260:	2310      	movs	r3, #16
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a51      	ldr	r2, [pc, #324]	@ (80043b0 <UART_SetConfig+0x304>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d17a      	bne.n	8004366 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004270:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004274:	2b08      	cmp	r3, #8
 8004276:	d824      	bhi.n	80042c2 <UART_SetConfig+0x216>
 8004278:	a201      	add	r2, pc, #4	@ (adr r2, 8004280 <UART_SetConfig+0x1d4>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042c3 	.word	0x080042c3
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042c3 	.word	0x080042c3
 8004290:	080042b3 	.word	0x080042b3
 8004294:	080042c3 	.word	0x080042c3
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042c3 	.word	0x080042c3
 80042a0:	080042bb 	.word	0x080042bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a4:	f7fe ffd6 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80042a8:	61f8      	str	r0, [r7, #28]
        break;
 80042aa:	e010      	b.n	80042ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042ac:	4b44      	ldr	r3, [pc, #272]	@ (80043c0 <UART_SetConfig+0x314>)
 80042ae:	61fb      	str	r3, [r7, #28]
        break;
 80042b0:	e00d      	b.n	80042ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042b2:	f7fe ff37 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80042b6:	61f8      	str	r0, [r7, #28]
        break;
 80042b8:	e009      	b.n	80042ce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042be:	61fb      	str	r3, [r7, #28]
        break;
 80042c0:	e005      	b.n	80042ce <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8107 	beq.w	80044e4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d305      	bcc.n	80042f2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d903      	bls.n	80042fa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042f8:	e0f4      	b.n	80044e4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2200      	movs	r2, #0
 80042fe:	461c      	mov	r4, r3
 8004300:	4615      	mov	r5, r2
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	022b      	lsls	r3, r5, #8
 800430c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004310:	0222      	lsls	r2, r4, #8
 8004312:	68f9      	ldr	r1, [r7, #12]
 8004314:	6849      	ldr	r1, [r1, #4]
 8004316:	0849      	lsrs	r1, r1, #1
 8004318:	2000      	movs	r0, #0
 800431a:	4688      	mov	r8, r1
 800431c:	4681      	mov	r9, r0
 800431e:	eb12 0a08 	adds.w	sl, r2, r8
 8004322:	eb43 0b09 	adc.w	fp, r3, r9
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004334:	4650      	mov	r0, sl
 8004336:	4659      	mov	r1, fp
 8004338:	f7fb ff48 	bl	80001cc <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4613      	mov	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800434a:	d308      	bcc.n	800435e <UART_SetConfig+0x2b2>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004352:	d204      	bcs.n	800435e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	e0c2      	b.n	80044e4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004364:	e0be      	b.n	80044e4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800436e:	d16a      	bne.n	8004446 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004370:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004374:	2b08      	cmp	r3, #8
 8004376:	d834      	bhi.n	80043e2 <UART_SetConfig+0x336>
 8004378:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <UART_SetConfig+0x2d4>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043cd 	.word	0x080043cd
 800438c:	080043e3 	.word	0x080043e3
 8004390:	080043d3 	.word	0x080043d3
 8004394:	080043e3 	.word	0x080043e3
 8004398:	080043e3 	.word	0x080043e3
 800439c:	080043e3 	.word	0x080043e3
 80043a0:	080043db 	.word	0x080043db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a4:	f7fe ff56 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80043a8:	61f8      	str	r0, [r7, #28]
        break;
 80043aa:	e020      	b.n	80043ee <UART_SetConfig+0x342>
 80043ac:	efff69f3 	.word	0xefff69f3
 80043b0:	40008000 	.word	0x40008000
 80043b4:	40013800 	.word	0x40013800
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40004400 	.word	0x40004400
 80043c0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043c4:	f7fe ff5c 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 80043c8:	61f8      	str	r0, [r7, #28]
        break;
 80043ca:	e010      	b.n	80043ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043cc:	4b4c      	ldr	r3, [pc, #304]	@ (8004500 <UART_SetConfig+0x454>)
 80043ce:	61fb      	str	r3, [r7, #28]
        break;
 80043d0:	e00d      	b.n	80043ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d2:	f7fe fea7 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80043d6:	61f8      	str	r0, [r7, #28]
        break;
 80043d8:	e009      	b.n	80043ee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043de:	61fb      	str	r3, [r7, #28]
        break;
 80043e0:	e005      	b.n	80043ee <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d077      	beq.n	80044e4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005a      	lsls	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	441a      	add	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	fbb2 f3f3 	udiv	r3, r2, r3
 8004408:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b0f      	cmp	r3, #15
 800440e:	d916      	bls.n	800443e <UART_SetConfig+0x392>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004416:	d212      	bcs.n	800443e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f023 030f 	bic.w	r3, r3, #15
 8004420:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	085b      	lsrs	r3, r3, #1
 8004426:	b29b      	uxth	r3, r3
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	b29a      	uxth	r2, r3
 800442e:	8afb      	ldrh	r3, [r7, #22]
 8004430:	4313      	orrs	r3, r2
 8004432:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	8afa      	ldrh	r2, [r7, #22]
 800443a:	60da      	str	r2, [r3, #12]
 800443c:	e052      	b.n	80044e4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004444:	e04e      	b.n	80044e4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004446:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800444a:	2b08      	cmp	r3, #8
 800444c:	d827      	bhi.n	800449e <UART_SetConfig+0x3f2>
 800444e:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <UART_SetConfig+0x3a8>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	0800449f 	.word	0x0800449f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800449f 	.word	0x0800449f
 8004470:	0800449f 	.word	0x0800449f
 8004474:	08004497 	.word	0x08004497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fe feec 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 800447c:	61f8      	str	r0, [r7, #28]
        break;
 800447e:	e014      	b.n	80044aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004480:	f7fe fefe 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8004484:	61f8      	str	r0, [r7, #28]
        break;
 8004486:	e010      	b.n	80044aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b1d      	ldr	r3, [pc, #116]	@ (8004500 <UART_SetConfig+0x454>)
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe fe49 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8004492:	61f8      	str	r0, [r7, #28]
        break;
 8004494:	e009      	b.n	80044aa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800449a:	61fb      	str	r3, [r7, #28]
        break;
 800449c:	e005      	b.n	80044aa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044a8:	bf00      	nop
    }

    if (pclk != 0U)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d019      	beq.n	80044e4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	085a      	lsrs	r2, r3, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	441a      	add	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	d909      	bls.n	80044de <UART_SetConfig+0x432>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d205      	bcs.n	80044de <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	e002      	b.n	80044e4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80044f0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3728      	adds	r7, #40	@ 0x28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	00f42400 	.word	0x00f42400

08004504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01a      	beq.n	800461a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004602:	d10a      	bne.n	800461a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	605a      	str	r2, [r3, #4]
  }
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b098      	sub	sp, #96	@ 0x60
 800464c:	af02      	add	r7, sp, #8
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004658:	f7fc fb2e 	bl	8000cb8 <HAL_GetTick>
 800465c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d12e      	bne.n	80046ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800466c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004674:	2200      	movs	r2, #0
 8004676:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f88c 	bl	8004798 <UART_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d021      	beq.n	80046ca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469a:	653b      	str	r3, [r7, #80]	@ 0x50
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e6      	bne.n	8004686 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e062      	b.n	8004790 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d149      	bne.n	800476c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f856 	bl	8004798 <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d03c      	beq.n	800476c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	e853 3f00 	ldrex	r3, [r3]
 80046fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004710:	633b      	str	r3, [r7, #48]	@ 0x30
 8004712:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004714:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004718:	e841 2300 	strex	r3, r2, [r1]
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e6      	bne.n	80046f2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3308      	adds	r3, #8
 800472a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60fb      	str	r3, [r7, #12]
   return(result);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	617b      	str	r3, [r7, #20]
   return(result);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e5      	bne.n	8004724 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e011      	b.n	8004790 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3758      	adds	r7, #88	@ 0x58
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a8:	e04f      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d04b      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fc fa81 	bl	8000cb8 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e04e      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d037      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0xb2>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b80      	cmp	r3, #128	@ 0x80
 80047de:	d034      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0xb2>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d031      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d110      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2208      	movs	r2, #8
 80047fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f838 	bl	8004872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2208      	movs	r2, #8
 8004806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e029      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004824:	d111      	bne.n	800484a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800482e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f81e 	bl	8004872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e00f      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	461a      	mov	r2, r3
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	429a      	cmp	r2, r3
 8004866:	d0a0      	beq.n	80047aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004872:	b480      	push	{r7}
 8004874:	b095      	sub	sp, #84	@ 0x54
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800488e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004898:	643b      	str	r3, [r7, #64]	@ 0x40
 800489a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800489e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d118      	bne.n	800491a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f023 0310 	bic.w	r3, r3, #16
 80048fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6979      	ldr	r1, [r7, #20]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	613b      	str	r3, [r7, #16]
   return(result);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e6      	bne.n	80048e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800492e:	bf00      	nop
 8004930:	3754      	adds	r7, #84	@ 0x54
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <memset>:
 800493a:	4402      	add	r2, r0
 800493c:	4603      	mov	r3, r0
 800493e:	4293      	cmp	r3, r2
 8004940:	d100      	bne.n	8004944 <memset+0xa>
 8004942:	4770      	bx	lr
 8004944:	f803 1b01 	strb.w	r1, [r3], #1
 8004948:	e7f9      	b.n	800493e <memset+0x4>
	...

0800494c <__libc_init_array>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	4d0d      	ldr	r5, [pc, #52]	@ (8004984 <__libc_init_array+0x38>)
 8004950:	4c0d      	ldr	r4, [pc, #52]	@ (8004988 <__libc_init_array+0x3c>)
 8004952:	1b64      	subs	r4, r4, r5
 8004954:	10a4      	asrs	r4, r4, #2
 8004956:	2600      	movs	r6, #0
 8004958:	42a6      	cmp	r6, r4
 800495a:	d109      	bne.n	8004970 <__libc_init_array+0x24>
 800495c:	4d0b      	ldr	r5, [pc, #44]	@ (800498c <__libc_init_array+0x40>)
 800495e:	4c0c      	ldr	r4, [pc, #48]	@ (8004990 <__libc_init_array+0x44>)
 8004960:	f000 f818 	bl	8004994 <_init>
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	2600      	movs	r6, #0
 800496a:	42a6      	cmp	r6, r4
 800496c:	d105      	bne.n	800497a <__libc_init_array+0x2e>
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	f855 3b04 	ldr.w	r3, [r5], #4
 8004974:	4798      	blx	r3
 8004976:	3601      	adds	r6, #1
 8004978:	e7ee      	b.n	8004958 <__libc_init_array+0xc>
 800497a:	f855 3b04 	ldr.w	r3, [r5], #4
 800497e:	4798      	blx	r3
 8004980:	3601      	adds	r6, #1
 8004982:	e7f2      	b.n	800496a <__libc_init_array+0x1e>
 8004984:	080049fc 	.word	0x080049fc
 8004988:	080049fc 	.word	0x080049fc
 800498c:	080049fc 	.word	0x080049fc
 8004990:	08004a00 	.word	0x08004a00

08004994 <_init>:
 8004994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004996:	bf00      	nop
 8004998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499a:	bc08      	pop	{r3}
 800499c:	469e      	mov	lr, r3
 800499e:	4770      	bx	lr

080049a0 <_fini>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	bf00      	nop
 80049a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a6:	bc08      	pop	{r3}
 80049a8:	469e      	mov	lr, r3
 80049aa:	4770      	bx	lr
